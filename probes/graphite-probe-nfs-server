#!/usr/bin/perl

# purpose:  log NFS stats to the global graphite

use POSIX 'strftime';
use strict;
use Getopt::Long;
use Sys::Hostname;

use vars '%Config';

$Config{stats}="/proc/net/rpc/nfsd";

unless(&GetOptions(
		   "graphite=s" => \$Config{graphite},
		   "prefix=s" => \$Config{prefix},
		   )) {
    
    die("Bad options");
}

unless(defined $Config{prefix}) {
    $Config{prefix} = "system." . hostname ;
}

&main;

sub main {
    my $stats={};

    open(my $input, $Config{stats}) || die("Failed to read $Config{stats}: $!");

    while(<$input>) {
	chop;
#	&debug("read line [$_]");
	if(/^rc/) {
	    &handleReadCache($stats, $_);
	    next;
	}
	if(/^io/) {
	    &handleIOLine($stats,  $_);
	    next;
	}
	if(/^fh/) {
	    &handleFH($stats,  $_);
	    next;
	}
	if(/^th/) {
	    &handleTH($stats,  $_);
	    next;
	}
	if(/^ra/) {
	    &handleRA($stats,  $_);
	    next;
	}
    }

    close $input;

    my $now = strftime("%s", localtime());

    my $graphite;

    if($Config{graphite}) {
	my ($host, $port) = split(/:/, $Config{graphite});
	$port = 2003 unless $port;
	open($graphite, "| nc -q 2 $host $port") || die("Failed to write to netcat $host:$port : $!");
	select $graphite;
    }

    foreach my $key (keys %$stats) {
	print "$Config{prefix}.nfsd.$key ", $stats->{$key}, " $now\n";
    }

    if($graphite) {
	select STDOUT;
	close $graphite;
    }
}

sub debug { 
    print "@_\n";
}

sub handleTH {
    my $stats=shift;
    my $line = shift;
    my ($discard, $threads, $maxedCount, $hist10, $hist20, $hist30, $hist40, $hist50, $hist60, $hist70, $hist80, $hist90, $hist100) = 
	split(/\s+/, $line);

    $stats->{"threads.count"}=$threads;
    $stats->{"threads.fully_utilized_count"}=$maxedCount;
    $stats->{"threads.used.histo_010"}=$hist10;
    $stats->{"threads.used.histo_020"}=$hist20;
    $stats->{"threads.used.histo_030"}=$hist30;
    $stats->{"threads.used.histo_040"}=$hist40;
    $stats->{"threads.used.histo_050"}=$hist50;
    $stats->{"threads.used.histo_060"}=$hist60;
    $stats->{"threads.used.histo_070"}=$hist70;
    $stats->{"threads.used.histo_080"}=$hist80;
    $stats->{"threads.used.histo_090"}=$hist90;
    $stats->{"threads.used.histo_100"}=$hist100;
}

sub handleIOLine {
    my $stats=shift;
    my $line = shift;
    my ($discard, $read, $written) = split(/\s+/, $line);

    $stats->{"io.read"}=$read;
    $stats->{"io.write"}=$written;
}

sub handleFH {
    my $stats=shift;
    my $line = shift;
    my ($discard, $stale, $total, $anon, $dirCacheMiss, $nondirCacheMiss) = split(/\s+/, $line);

    $stats->{"file_handles.stale"}=$stale;
    $stats->{"file_handles.total"}=$total;
    $stats->{"file_handles.anonymous"}=$anon;
    $stats->{"file_handles.dir_cache_miss"}=$dirCacheMiss;
    $stats->{"file_handles.nondir_cache_miss"}=$nondirCacheMiss;
}


sub handleReadCache {
    my $stats=shift;
    my $line = shift;
    my ($discard, $hits, $misses, $bypassed) = split(/\s+/, $line);

    $stats->{"read_cache.hits"}=$hits;
    $stats->{"read_cache.misses"}=$misses;
    $stats->{"read_cache.bypassed"}=$bypassed;

}

sub handleRA {
    my $stats=shift;
    my $line = shift;
    my ($discard, $size, $hist10, $hist20, $hist30, $hist40, $hist50, $hist60, $hist70, $hist80, $hist90, $hist100, $miss) = 
	split(/\s+/, $line);

    $stats->{"read_ahead.size"}=$size;
    $stats->{"read_ahead.found.histo_010"}=$hist10;
    $stats->{"read_ahead.found.histo_020"}=$hist20;
    $stats->{"read_ahead.found.histo_030"}=$hist30;
    $stats->{"read_ahead.found.histo_040"}=$hist40;
    $stats->{"read_ahead.found.histo_050"}=$hist50;
    $stats->{"read_ahead.found.histo_060"}=$hist60;
    $stats->{"read_ahead.found.histo_070"}=$hist70;
    $stats->{"read_ahead.found.histo_080"}=$hist80;
    $stats->{"read_ahead.found.histo_090"}=$hist90;
    $stats->{"read_ahead.found.histo_100"}=$hist100;
    $stats->{"read_ahead.missed"}=$miss;
}

sub readConfig {
    my $file = shift;
    my $config;

    open(my $fh, $file) || die("Failed to read $file: $!");

    while(<$fh>) {
	chop;
	next if /^\s*$/;
	next if /^\s*\#/;
	next unless /(\w+)=(.*)/;
	$config->{$1}=&trim($2);
    }

    close $fh;

    return $config;
}

sub trim {
    my $s = shift;

    $s =~ s/^\s+//;
    $s =~ s/\s+$//;

    return $s;
}
    

    


