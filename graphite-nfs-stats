#!/usr/bin/perl

# purpose:  log NFS stats to the global graphite

use POSIX 'strftime';
use strict;
use Getopt::Long;

use vars '%Config';

$Config{info}="/etc/edialog.conf";
$Config{stats}="/proc/net/rpc/nfsd";
$Config{prefix}="development.storage";

unless(&GetOptions(
		   "show" => \$Config{show},
		   "prefix=s" => \$Config{prefix},
		   )) {
    
    die("Bad options");
}

&main;

sub main {
    my $stats={};

    my $machine = `hostname`;
    chop $machine;

    my $prefix="$Config{prefix}.$machine.nfsd";

    open(my $input, $Config{stats}) || die("Failed to read $Config{info}: $!");

    while(<$input>) {
	chop;
#	&debug("read line [$_]");
	if(/^rc/) {
	    &handleReadCache($stats,$prefix, $_);
	    next;
	}
	if(/^io/) {
	    &handleIOLine($stats, $prefix, $_);
	    next;
	}
	if(/^fh/) {
	    &handleFH($stats, $prefix, $_);
	    next;
	}
	if(/^th/) {
	    &handleTH($stats, $prefix, $_);
	    next;
	}
	if(/^ra/) {
	    &handleRA($stats, $prefix, $_);
	    next;
	}
    }

    close $input;

    my $now = strftime("%s", localtime());

    my $out;

    unless($Config{show}) {
	open($out, "| nc graphite 2003") || die("Failed to write to netcat: $!");
	select $out;
    }

    foreach my $key (keys %$stats) {
	print "$key ", $stats->{$key}, " $now\n";
    }

    unless($Config{show}) {
	select STDOUT;
	close $out;
    }
}

sub debug { 
    print "@_\n";
}

sub handleTH {
    my $stats=shift;
    my $prefix = shift;
    my $line = shift;
    my ($discard, $threads, $maxedCount, $hist10, $hist20, $hist30, $hist40, $hist50, $hist60, $hist70, $hist80, $hist90, $hist100) = 
	split(/\s+/, $line);

    $stats->{"$prefix.threads.count"}=$threads;
    $stats->{"$prefix.threads.fully_utilized_count"}=$maxedCount;
    $stats->{"$prefix.threads.used.histo_010"}=$hist10;
    $stats->{"$prefix.threads.used.histo_020"}=$hist20;
    $stats->{"$prefix.threads.used.histo_030"}=$hist30;
    $stats->{"$prefix.threads.used.histo_040"}=$hist40;
    $stats->{"$prefix.threads.used.histo_050"}=$hist50;
    $stats->{"$prefix.threads.used.histo_060"}=$hist60;
    $stats->{"$prefix.threads.used.histo_070"}=$hist70;
    $stats->{"$prefix.threads.used.histo_080"}=$hist80;
    $stats->{"$prefix.threads.used.histo_090"}=$hist90;
    $stats->{"$prefix.threads.used.histo_100"}=$hist100;
}

sub handleIOLine {
    my $stats=shift;
    my $prefix = shift;
    my $line = shift;
    my ($discard, $read, $written) = split(/\s+/, $line);

    $stats->{"$prefix.io.read"}=$read;
    $stats->{"$prefix.io.write"}=$written;
}

sub handleFH {
    my $stats=shift;
    my $prefix = shift;
    my $line = shift;
    my ($discard, $stale, $total, $anon, $dirCacheMiss, $nondirCacheMiss) = split(/\s+/, $line);

    $stats->{"$prefix.file_handles.stale"}=$stale;
    $stats->{"$prefix.file_handles.total"}=$total;
    $stats->{"$prefix.file_handles.anonymous"}=$anon;
    $stats->{"$prefix.file_handles.dir_cache_miss"}=$dirCacheMiss;
    $stats->{"$prefix.file_handles.nondir_cache_miss"}=$nondirCacheMiss;
}


sub handleReadCache {
    my $stats=shift;
    my $prefix = shift;
    my $line = shift;
    my ($discard, $hits, $misses, $bypassed) = split(/\s+/, $line);

    $stats->{"$prefix.read_cache.hits"}=$hits;
    $stats->{"$prefix.read_cache.misses"}=$misses;
    $stats->{"$prefix.read_cache.bypassed"}=$bypassed;

}

sub handleRA {
    my $stats=shift;
    my $prefix = shift;
    my $line = shift;
    my ($discard, $size, $hist10, $hist20, $hist30, $hist40, $hist50, $hist60, $hist70, $hist80, $hist90, $hist100, $miss) = 
	split(/\s+/, $line);

    $stats->{"$prefix.read_ahead.size"}=$size;
    $stats->{"$prefix.read_ahead.found.histo_010"}=$hist10;
    $stats->{"$prefix.read_ahead.found.histo_020"}=$hist20;
    $stats->{"$prefix.read_ahead.found.histo_030"}=$hist30;
    $stats->{"$prefix.read_ahead.found.histo_040"}=$hist40;
    $stats->{"$prefix.read_ahead.found.histo_050"}=$hist50;
    $stats->{"$prefix.read_ahead.found.histo_060"}=$hist60;
    $stats->{"$prefix.read_ahead.found.histo_070"}=$hist70;
    $stats->{"$prefix.read_ahead.found.histo_080"}=$hist80;
    $stats->{"$prefix.read_ahead.found.histo_090"}=$hist90;
    $stats->{"$prefix.read_ahead.found.histo_100"}=$hist100;
    $stats->{"$prefix.read_ahead.missed"}=$miss;
}

sub readConfig {
    my $file = shift;
    my $config;

    open(my $fh, $file) || die("Failed to read $file: $!");

    while(<$fh>) {
	chop;
	next if /^\s*$/;
	next if /^\s*\#/;
	next unless /(\w+)=(.*)/;
	$config->{$1}=&trim($2);
    }

    close $fh;

    return $config;
}

sub trim {
    my $s = shift;

    $s =~ s/^\s+//;
    $s =~ s/\s+$//;

    return $s;
}
    

    


