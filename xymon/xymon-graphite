#!/usr/bin/env perl

=head1 NAME

B<xymon-graphite> -- Monitor graphite data and trigger outcomes in xymon

=head1 SYNOPSIS

B<xymon-graphite>  [-debug] [-noexec] [-man] [-help] [-noreport] [-f CONFIGFILE]

=head1 DESCRIPTION

This command should be run periodically to update Xymon column status
from data collected from a Graphite server.

The result of a run is the particlar Xymon column will be updated as
appropriate.  The status message will include HTML which embeds a
Graphite graph of the time for which this command was run.  

Additionally, if the status will be yellow or red, the graph will be
decorated with warning or error threshold lines and the reason for the
status will be printed as text.

=head1 OPTIONS

=over

=item -f|-config-file CONFIGFILE

use the config file given rather than the default of
/home/xymon/server/etc/graphite.cfg 

=item -noreport

Do not invoke the 'bb' command to send status

=item -debug

Turn on debugging output

=item -man

Show this page

=item -help

Show a brief summary of options

=back

=cut

use strict;
our %Config;

use POSIX 'strftime';
use Pod::Usage;
use Getopt::Long;

# this lives here because of file-read order in PERL
@ExceedsCondition::ISA = 'Condition';

$Config{file}="/home/xymon/server/etc/graphite.cfg";

unless (GetOptions(
	    "debug" => \$Config{debug}, 
	    "noreport" => \$Config{noreport},
	    "f|config-file=s" => \$Config{file},
	    "man" => \$Config{man},
	    "help" => \$Config{help},
	)) {
    &usage;
    exit 1; # unreachable
}

&help if $Config{help};
&man if $Config{man};

&main;

sub main {

    open(my $fh, $Config{file}) || die("Failed to read $Config{file}: $!");

    my @probes = &readConfig($fh);

    close $fh;
    
    foreach my $probe (@probes) {
	&process($probe);
    }
}

sub readConfig {
    my $fh = shift;
    my @probes;
    my $currentProbe;

    while(<$fh>) {
	chop;
	next if /^\s*#/;
	next if /^\s*$/;

	if ( /^\s*\[(.*)\]\s*$/) {
	    $currentProbe->ensureValid if $currentProbe;

	    $currentProbe = new Probe(section => $1);
	    push(@probes, $currentProbe);

#	    &debug("Section '$1'");
	}
	if (/^\s*([^\s=]+)\s*=\s*(.*)$/) {
	    $currentProbe->{$1}=trim($2);
#	    &debug("Recording '$1' = '" . $currentProbe->{$1} . "'");
	}
    }

    $currentProbe->ensureValid if $currentProbe;

    return @probes;
}

sub trim {
    my $arg = shift;
    $arg =~ s/^\s*//;
    $arg =~ s/\s*$//;

    return $arg;
}


sub process {
    my $probe = shift;

    my $warn = new ExceedsCondition(new ConstantSeries($probe->{warn}), 1);
    my $error = new ExceedsCondition(new ConstantSeries($probe->{error}), 2);

    my $status=0;
    my @content;

    my $linecount=0;

    my $url = $probe->{url};
    open(my $fh, "curl -s '$url&from=-5minutes&until=now&rawData=true'|") || return 0;

    my @series;

     while(<$fh>) {
	chop;
	$linecount++;
	my $series = new Series($_);
#	&debug("Handling series", $series->name);
	if($series->name =~ /^warn/i) {
	    $warn = $series unless $warn;
	}
	elsif($series->name =~ /^error/i) {
	    $error = $series unless $error;
	}
	else {
	    push(@series, $series);
	}
    }

    &debug("have warning series") if $warn;
    &debug("have error series") if $error;

    die("Failed to read series from url $url") unless @series;

    close $fh;

    my $status = new StatusCollector;

    foreach my $series (@series) { 

	 foreach my $value ($series->data) {
	    $status->setStatus($series, $warn->status) if $warn->isTriggered($value);
	    $status->setStatus($series, $error->status) if $error->isTriggered($value);
	}
    }


    if($probe->isIndependent) {
	foreach my $series (@series) {
	    &report($status, $status->getStatus($series), $url, $linecount, $warn, $error, $probe->column($series), $series);
	}
    }
    else {
	&report($status, $status->getStatus, $url, $linecount, $warn, $error, $probe->column, @series);
    }

}

sub report {
    my $statusC = shift;
    my $status = shift;
    my $url = shift;
    my $linecount = shift;
    my $warn = shift;
    my $error = shift;
    my $column = shift;
    my @series = @_;
    my @content;

    &debug("Reporting on column $column");

    die("Must pass in some series") unless @series;

    my $from = $series[0]->{start};
    my $to = $series[0]->{end};

    foreach my $series (@series) {
	my $param = $series->name;
	if($statusC->getStatus($series) eq 1) {
	    push(@content, "$param exceeded warning threshold");
	}
	elsif($statusC->getStatus($series) eq 2) {
	    push(@content, "$param exceeded error threshold");
	}
    }

    
    
#http://graphite/render?width=400&from=-20minutes&until=now&height=250&target=alias(color(lineWidth(dashed(threshold(1))%2C2)%2C%22yellow%22)%2C%22WARN%22)&uniq=0.0314605470321202&title=alias(color(lineWidth(dashed(threshold(1))%2C2)%2C%22yellow%22)%2C%22WARN%22)

    my $baseURL = $url;


    if($status > 0 ) {
	my $threshold = $warn->{series}->{value};
	if($threshold > 0) {
	$url .= "&target=alias(color(dashed(threshold($threshold)),\"yellow\"),\"Xymon Warning Threshold ($threshold)\")";
	}
    }
    if($status > 1 ) {
	my $threshold = $error->{series}->{value};
	if($threshold > 0) {
	$url .= "&target=alias(color(dashed(threshold($threshold)),\"red\"),\"Xymon Error Threshold ($threshold)\")";
	}
    }


    my $aFrom = strftime("%H%%3A%M_%Y%m%d", localtime($from));
    my $aTo = strftime("%H%%3A%M_%Y%m%d", localtime($to));

    $url .= "&from=$aFrom&until=$aTo";

    $url .= "&width=400" unless $url =~ /&width/;
    $url .= "&height=300" unless $url =~ /&height/;

    if($linecount>5) {
	my $height = 300 + 15 * $linecount;
	$url .= "&height=$height&hideLegend=false";
    }


    $url =~ s/,/%2C/g;
    $url =~ s/"/%22/g;

    push(@content, "<img src=\"$url\"/> <p>Monitored URL <a href=\"$baseURL\">here</a></p>");

    my $color;

    $color = "green" if $status == 0;
    $color = "yellow" if $status == 1;
    $color = "red" if $status == 2;

    my $time = strftime("%c", localtime($to));

    unshift(@content, "Status as of $time");


    my $content = join("\n", @content) . "\n";
#    $content =~ s/'/\\'/g;

    my $cmd = "bb localhost 'status $column $color $content'";

    print $cmd if $Config{noreport};

    return if $Config{noreport};
    return !system($cmd);
}


sub max {
    my $a = shift;
    my $b = shift;
   
    return $a if $a > $b;
    return $b;
}


package Probe;

sub new {
    my $self = {};
    my $class = shift;
    my %args = @_;

    bless $self, $class;

    foreach my $arg (keys %args) {
	$self->{$arg}=$args{$arg};
    }

    return $self;
}

sub isIndependent {
    my $self = shift;
    my $type = $self->{probetype};

    return 1 if $type eq "independent";
}

sub getProblems {
    my $self = shift;
    my $name = $self->{section};
    my @problems;

     push(@problems, "missing url")     unless($self->{url});

    if ($self->isIndependent) {
	push(@problems, "missing columnregexp") unless $self->{columnregexp};
	push(@problems, "missing columneval") unless $self->{columneval};
    }
    else {
	push(@problems, "missing column") unless $self->{column};
    }

    return @problems;
}

sub ensureValid {
    my $self = shift;
    my @problems = $self->getProblems;
    my $section = $self->{section};
    if(@problems) {
	die("Errors in probe '$section':\n  - " . join("\n  - ", @problems) . "\nProbe '$section' invalid ");
    }
}
    

sub column {
    my $self = shift;
    my $series = shift;

    my $column = $self->{column};

    return $column unless $series;
    
    # we need to come up with a per-series column

    my $sname = $series->name;
    my $re = $self->{columnregexp};

    die("Must specify columnregexp for independent series in probe " . $self->{section}) unless $re;

    $sname =~ /$re/;

    my $columneval = $self->{columneval};

    die("Must specify columneval for independent series in probe " . $self->{section}) unless $columneval;

    eval "return \"$columneval\";";
}
    
package Series;
sub new {
    my $self = {};
    my $class = shift;
    my $line = shift;

    bless $self, $class;

    my ($meta, $data) = split(/\|/, $line, 2);
    my ($name, $start, $end, $period) = split(/,/, $meta);
    my @data = split(/,/, $data);

    $self->{name}=$name;
    $self->{start}=$start;
    $self->{end}=$end;
    $self->{period}=$period;

    $self->{data}=\@data;

    return $self;
}


sub name {
    my $self = shift;
    return $self->{name};
}

sub data {
    my $self = shift;
    return @{$self->{data}};
}

sub column {
    my $self = shift;

    return $self->{column};
}

    
package ConstantSeries;

sub new {
    my $self = {};
    my $class = shift;
    my $value = shift;

    $self->{value}=$value;

    bless $self, $class;

    return $self;
}

sub datum {
    return $_[0]->{value};
}

package Condition;
sub new {
    my $self = {};
    my $class = shift;
    my $series = shift;
    my $status = shift;

    $self->{series}=$series;
    $self->{status} = $status;
    

    bless $self, $class;

    return $self;
}

sub status {
    my $self = shift;
    return $self->{status};
}
    
package ExceedsCondition;

sub isTriggered {
    my $self = shift;
    my $value  = shift;

    my $ref = $self->{series}->datum;

    return if $value eq "None";

    if($value > $ref) {
#	&main::debug($value, ">", $self->{value}, ": Condition is triggered");
	return 1 ;
    }
#	&main::debug($value, ">", $self->{value}, ": Condition NOT triggered");
    return 0;
}


package StatusCollector;
sub new {
    my $self = {};
    my $class = shift;
    my %args = @_;

    bless $self, $class;

    foreach my $arg (keys %args) {
	$self->{$arg}=$args{$arg};
    }

    return $self;
}

sub setStatus {
    my $self = shift;
    my $series = shift;
    my $status = shift;

    $status = 0 unless $status;

    if($series) {
	$self->{status}->{$series} = $status if $status > $self->{status}->{$series};
#	&main::debug("Status of $series is ", $self->{status}->{$series});
    }

    $self->{overallstatus} = $status if $status > $self->{overallstatus};
#    &main::debug("Overall status is ", $self->{overallstatus});
}

sub getStatus {
    my $self = shift;
    my $series = shift;

    return $self->{overallstatus} unless $series;

    return $self->{status}->{$series};
}

sub getSeries {
    my $self = shift;

    return keys %{$self->{status}};
}

package main;

sub debug {
    return unless $Config{debug};

    print STDERR "@_\n";
}

sub error {
    &debug(@_);
    print STDERR "@_\n";
}

sub run {
  &debug(@_);
  return !system(@_) unless $Config{noexec};
}

sub help {
    pod2usage( -exitval => 0, -center => "graphiteutils", -verbose=>1);
}

sub man {
    pod2usage( -exitval => 0, -center => "graphiteutils", -verbose=>2);
}

sub usage {
    pod2usage( -exitstatus => 1);
}

=pod 

=head1 EXAMPLES

The most straight-forward way to run this command is to include it in
the Xymon tasks.d directory, perhaps with the following definition:


 [graphite]
	ENVFILE /home/xymon/client/etc/xymonclient.cfg
        NEEDS xymond
        CMD /home/xymon/server/bin/xymon-graphite -f /home/xymon/server/etc/graphite.cfg
        LOGFILE $XYMONSERVERLOGS/xymon-graphite.log
        INTERVAL 5m

A configuration file might look like this:

 [packet loss]
 column=foo.bar 
 url=http://graphite.example.com/render?width=500&from=-4hours&until=now&height=400&target=system.graphite.ping.*.packet_loss.percent&target=alias%28color%28threshold%2810%29%2C%22yellow%22%29%2C%22Warning%22%29&title=Packet_Loss&hideLegend=false&uniq=0.16443394137846012&rawData=true 
 warn=00 
 error=20 

 [ping time]
 probetype=independent
 columnregexp=ping\.([^\.]+)
 columneval=foo.$1
 url=http://graphite.example.com/render?width=500&from=-4hours&until=now&height=400&target=legendValue(system.graphite.ping.*.90percent.ms%2C%22avg%22)&title=90_perc_ping_time&uniq=0.8639914226792692
 warn = 20
 error = 30

=head1 FILES

The default configuration file is /home/xymon/server/etc/graphite.cfg

A probe is defined by a configuration file containing Xymon tasks.cfg
style section, followed by name=value pairs.  The names of the
sections are not currently significant.

All probes take names "error" and "warn" which are respectively the
thresholds at which the column will be set to red and yellow.  Both of
these are optional though if neither is set the probe will not be
terribly useful.  Both values should be bare numbers without units to
which the graphite data will be compared.

All probes also take a "url" column which is designed to be pasted in
from a browser monitoring page.  The URL does *NOT* need to be of the
appropriate time scale -- the time scale will be overridden by the
probe.

There are two different types of xymon probes defined in the
configuration file: static columns names and "independent" column
names.

=item Statically named probes

Static column names are just that: a probe where the column name is
defined exactly in the configuration file.  If any value in the
graphite data exceeds a threshold the status will be reported for the
column given in the probe definition.

Names required for staticly named probes are:  url and column.  

=item "Indepdent" probes

"Indepentant" probes will consider each graphite data series
independently against the thresholds and will build a column name from
a PERL regexp based on the data series name.

Names required for "indepdent" probe types are: probetype=indepdent,
url, columnregexp, and columneval

"columnregexp" should be a PERL regular expresion which will be
matched against the data series name.  "columneval" will then be
evaluated in the context of the regular expression match to generate
the column name, which will then be passed verbatim to Xymon.

=back

=head1 ENVIRONMENT

=item BB command

This program assumes 'bb' is reachable on the path

=item curl command

This program uses the 'curl' command to retrieve the graphite data and
assumes that the command is reachable on the path.

=back

=head1 BUGS AND CAVEATS

This command will take the times from "now" to the appropriate time in the past and will retrieve graphite data for that time period.  The graphs displayed on the Xymon status pages are live links for the same time period.  If graphite retroactively adds or changes data, that data will display on the status page when viewed but may *not* have been included in the comparison.

This is most often a problem if you have graphite probes that suffer a
reporting lag.

=head1 AUTHOR

Dewey Sasser <dewey@sasser.com>
=cut
